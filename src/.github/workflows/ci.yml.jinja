
name: test

"on":
  pull_request:
  push:
    branches:
    {%- for branch in main_branches or ["main", "master"] %}
      - {{ branch }}
    {%- endfor %}
  workflow_dispatch:
    inputs:
      pytest_addopts:
        description:
          Extra options for pytest; use -vv for full details; see
          https://docs.pytest.org/en/latest/example/simple.html#how-to-change-command-line-options-defaults
        required: false

env:
  {%- raw %}
  LANG: "en_US.utf-8"
  LC_ALL: "en_US.utf-8"
  PIP_CACHE_DIR: ${{ github.workspace }}/.cache.~/pip
  PIPX_HOME: ${{ github.workspace }}/.cache.~/pipx
  POETRY_CACHE_DIR: ${{ github.workspace }}/.cache.~/pypoetry
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  PYTEST_ADDOPTS: ${{ github.event.inputs.pytest_addopts }}
  PYTHONIOENCODING: "UTF-8"
  {%- endraw %}

jobs:
  {%- if pytest %}
    build-test:
      runs-on: ubuntu-20.04
      strategy:
        matrix:
          python:
          {%- for version in python_versions or ['3.9'] %}
              - {{ version }}
          {%- endfor %}
      steps:
        # Prepare environment
        - uses: actions/checkout@v2
        # Set up and run tests
        - name: Install python
          uses: actions/setup-python@v2
          with:
            python-version: {{ "${{ matrix.python }}" }}
        - name: Generate cache key CACHE
          run:
            {%- raw %}
            echo "CACHE=${{ secrets.CACHE_DATE }} ${{ runner.os }} $(python -VV |
            sha256sum | cut -d' ' -f1) ${{ hashFiles('pyproject.toml') }} ${{
            hashFiles('poetry.lock') }}" >> $GITHUB_ENV
            {%- endraw %}
        - uses: actions/cache@v2
          with:
            path: |
              .cache.~
              .venv
              ~/.local/bin
            key: venv {{ "${{ env.CACHE }}" }}
        - run: pip install poetry
        - name: Patch $PATH
          run: echo "$HOME/.local/bin" >> $GITHUB_PATH
        - run: poetry install
        # Run tests
        - run: poetry run pytest --prebuild
  {%- endif %}
    build-push:
      runs-on: ubuntu-20.04
      services:
        registry:
          image: registry:2
          ports:
            - 5000:5000
      env:
        DOCKER_IMAGE_NAME: {{ "${{ github.repository }}" }}
        DOCKERHUB_IMAGE_NAME: {{ dockerhub_image }}
        PUSH: {% if dockerhub_image or push_to_ghcr %}{{ "${{" }} toJSON(github.event_name != 'pull_request') {{ "}}" }}{% else %}False{% endif %}
      steps:
        # Set up Docker Environment
        - uses: actions/checkout@v2
        - uses: actions/cache@v2
          with:
            path: |
              /tmp/.buildx-cache
            key:
            {%- raw %}
              buildx|${{ secrets.CACHE_DATE }}|${{ runner.os }}|${{
              hashFiles('Dockerfile') }}
            {%- endraw %}
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v1
        - name: Set up Docker Buildx
          id: buildx
          uses: docker/setup-buildx-action@v1
          with:
            driver-opts: network=host
            install: true
        # Build and push
        - name: Docker meta for local images
          id: docker_meta_local
          uses: crazy-max/ghaction-docker-meta@v1
          with:
            {%- raw %}
            images: localhost:5000/${{ env.DOCKER_IMAGE_NAME }}
            tag-edge: true
            tag-semver: |
              {{version}}
              {{major}}.{{minor}}
            {%- endraw %}
        - name: Build and push to local (test) registry
          uses: docker/build-push-action@v2
          with:
            context: .
            file: ./Dockerfile
            platforms: |
            {%- for platform in platforms or ['linux/386','linux/amd64','linux/arm/v6','linux/arm/v7','linux/arm/v8','linux/arm64','linux/ppc64le','linux/s390x'] %}
              {{ platform }}
            {%- endfor %}
            load: false
            push: true
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
            {%- raw %}
            labels: ${{ steps.docker_meta_local.outputs.labels }}
            tags: ${{ steps.docker_meta_local.outputs.tags }}
            build-args: |
              VCS_REF=${{ github.sha }}
            {%- endraw %}
        {% if dockerhub_image or push_to_ghcr -%}
        # Next jobs only happen outside of pull requests and on main branches
        {% if dockerhub_image -%}
        - name: Login to DockerHub
          if: {{ "${{ fromJSON(env.PUSH) }}" }}
          uses: docker/login-action@v1
          with:
            username: {{ "${{ secrets.DOCKERHUB_LOGIN }}" }}
            password: {{ "${{ secrets.DOCKERHUB_TOKEN }}" }}
        {% endif -%}
        {% if push_to_ghcr -%}
        - name: Login to GitHub Container Registry
          if: {{ "${{ fromJSON(env.PUSH) }}" }}
          uses: docker/login-action@v1
          with:
            {%- raw %}
            registry: ghcr.io
            username: ${{ secrets.BOT_LOGIN }}
            password: ${{ secrets.BOT_TOKEN }}
            {%- endraw %}
        {% endif -%}
        - name: Docker meta for public images
          if: {{ "${{ fromJSON(env.PUSH) }}" }}
          id: docker_meta_public
          uses: crazy-max/ghaction-docker-meta@v1
          with:
            images: |
              {%- if push_to_ghcr %}
              {{ "ghcr.io/${{ env.DOCKER_IMAGE_NAME }}" }}
              {%- endif -%}
              {%- if dockerhub_image %}
              {{ "${{ env.DOCKERHUB_IMAGE_NAME }}" }}
              {%- endif %}
            {%- raw %}
            tag-edge: true
            tag-semver: |
              {{version}}
              {{major}}.{{minor}}
            {%- endraw %}
        - name: Build and push to public registry(s)
          if: {{ "${{ fromJSON(env.PUSH) }}" }}
          uses: docker/build-push-action@v2
          with:
            context: .
            file: ./Dockerfile
            platforms: |
            {%- for platform in platforms or ['linux/386','linux/amd64','linux/arm/v6','linux/arm/v7','linux/arm/v8','linux/arm64','linux/ppc64le','linux/s390x'] %}
              {{ platform }}
            {%- endfor %}
            load: false
            push: true
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
            {%- raw %}
            labels: ${{ steps.docker_meta_public.outputs.labels }}
            tags: ${{ steps.docker_meta_public.outputs.tags }}
            build-args: |
              VCS_REF=${{ github.sha }}
            {%- endraw %}
        {% endif %}
